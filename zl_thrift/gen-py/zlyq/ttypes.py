#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Item(object):
    """
    Attributes:
     - item_id
     - score
     - strategy
     - item_info

    """


    def __init__(self, item_id=None, score=None, strategy=None, item_info={
    },):
        self.item_id = item_id
        self.score = score
        self.strategy = strategy
        if item_info is self.thrift_spec[4][4]:
            item_info = {
            }
        self.item_info = item_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.item_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.score = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.strategy = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.item_info = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.item_info[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Item')
        if self.item_id is not None:
            oprot.writeFieldBegin('item_id', TType.I64, 1)
            oprot.writeI64(self.item_id)
            oprot.writeFieldEnd()
        if self.score is not None:
            oprot.writeFieldBegin('score', TType.DOUBLE, 2)
            oprot.writeDouble(self.score)
            oprot.writeFieldEnd()
        if self.strategy is not None:
            oprot.writeFieldBegin('strategy', TType.STRING, 3)
            oprot.writeString(self.strategy.encode('utf-8') if sys.version_info[0] == 2 else self.strategy)
            oprot.writeFieldEnd()
        if self.item_info is not None:
            oprot.writeFieldBegin('item_info', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.item_info))
            for kiter7, viter8 in self.item_info.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Req(object):
    """
    Attributes:
     - uid_type
     - udid
     - app_id
     - channel_id
     - start_time
     - end_time
     - count
     - abtest_parameters
     - impression_id
     - context_info
     - user_id
     - context_feature
     - content_type

    """


    def __init__(self, uid_type=None, udid=None, app_id=None, channel_id=None, start_time=None, end_time=None, count=40, abtest_parameters="", impression_id="", context_info="", user_id=0, context_feature="", content_type=0,):
        self.uid_type = uid_type
        self.udid = udid
        self.app_id = app_id
        self.channel_id = channel_id
        self.start_time = start_time
        self.end_time = end_time
        self.count = count
        self.abtest_parameters = abtest_parameters
        self.impression_id = impression_id
        self.context_info = context_info
        self.user_id = user_id
        self.context_feature = context_feature
        self.content_type = content_type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.uid_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.udid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.app_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.channel_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.start_time = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.end_time = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.abtest_parameters = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.impression_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.context_info = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.context_feature = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.content_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Req')
        if self.uid_type is not None:
            oprot.writeFieldBegin('uid_type', TType.I32, 1)
            oprot.writeI32(self.uid_type)
            oprot.writeFieldEnd()
        if self.udid is not None:
            oprot.writeFieldBegin('udid', TType.STRING, 2)
            oprot.writeString(self.udid.encode('utf-8') if sys.version_info[0] == 2 else self.udid)
            oprot.writeFieldEnd()
        if self.app_id is not None:
            oprot.writeFieldBegin('app_id', TType.STRING, 3)
            oprot.writeString(self.app_id.encode('utf-8') if sys.version_info[0] == 2 else self.app_id)
            oprot.writeFieldEnd()
        if self.channel_id is not None:
            oprot.writeFieldBegin('channel_id', TType.I64, 4)
            oprot.writeI64(self.channel_id)
            oprot.writeFieldEnd()
        if self.start_time is not None:
            oprot.writeFieldBegin('start_time', TType.I32, 5)
            oprot.writeI32(self.start_time)
            oprot.writeFieldEnd()
        if self.end_time is not None:
            oprot.writeFieldBegin('end_time', TType.I32, 6)
            oprot.writeI32(self.end_time)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 7)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.abtest_parameters is not None:
            oprot.writeFieldBegin('abtest_parameters', TType.STRING, 8)
            oprot.writeString(self.abtest_parameters.encode('utf-8') if sys.version_info[0] == 2 else self.abtest_parameters)
            oprot.writeFieldEnd()
        if self.impression_id is not None:
            oprot.writeFieldBegin('impression_id', TType.STRING, 9)
            oprot.writeString(self.impression_id.encode('utf-8') if sys.version_info[0] == 2 else self.impression_id)
            oprot.writeFieldEnd()
        if self.context_info is not None:
            oprot.writeFieldBegin('context_info', TType.STRING, 10)
            oprot.writeString(self.context_info.encode('utf-8') if sys.version_info[0] == 2 else self.context_info)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 11)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.context_feature is not None:
            oprot.writeFieldBegin('context_feature', TType.STRING, 12)
            oprot.writeString(self.context_feature.encode('utf-8') if sys.version_info[0] == 2 else self.context_feature)
            oprot.writeFieldEnd()
        if self.content_type is not None:
            oprot.writeFieldBegin('content_type', TType.I32, 13)
            oprot.writeI32(self.content_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Rsp(object):
    """
    Attributes:
     - status
     - items
     - abtest_ids
     - request_id

    """


    def __init__(self, status="", items=None, abtest_ids=None, request_id=None,):
        self.status = status
        self.items = items
        self.abtest_ids = abtest_ids
        self.request_id = request_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.items = []
                    (_etype12, _size9) = iprot.readListBegin()
                    for _i13 in range(_size9):
                        _elem14 = Item()
                        _elem14.read(iprot)
                        self.items.append(_elem14)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.abtest_ids = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.request_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Rsp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 1)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.items is not None:
            oprot.writeFieldBegin('items', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.items))
            for iter15 in self.items:
                iter15.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.abtest_ids is not None:
            oprot.writeFieldBegin('abtest_ids', TType.STRING, 3)
            oprot.writeString(self.abtest_ids.encode('utf-8') if sys.version_info[0] == 2 else self.abtest_ids)
            oprot.writeFieldEnd()
        if self.request_id is not None:
            oprot.writeFieldBegin('request_id', TType.STRING, 4)
            oprot.writeString(self.request_id.encode('utf-8') if sys.version_info[0] == 2 else self.request_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Item)
Item.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'item_id', None, None, ),  # 1
    (2, TType.DOUBLE, 'score', None, None, ),  # 2
    (3, TType.STRING, 'strategy', 'UTF8', None, ),  # 3
    (4, TType.MAP, 'item_info', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), {
    }, ),  # 4
)
all_structs.append(Req)
Req.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'uid_type', None, None, ),  # 1
    (2, TType.STRING, 'udid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'app_id', 'UTF8', None, ),  # 3
    (4, TType.I64, 'channel_id', None, None, ),  # 4
    (5, TType.I32, 'start_time', None, None, ),  # 5
    (6, TType.I32, 'end_time', None, None, ),  # 6
    (7, TType.I32, 'count', None, 40, ),  # 7
    (8, TType.STRING, 'abtest_parameters', 'UTF8', "", ),  # 8
    (9, TType.STRING, 'impression_id', 'UTF8', "", ),  # 9
    (10, TType.STRING, 'context_info', 'UTF8', "", ),  # 10
    (11, TType.I64, 'user_id', None, 0, ),  # 11
    (12, TType.STRING, 'context_feature', 'UTF8', "", ),  # 12
    (13, TType.I32, 'content_type', None, 0, ),  # 13
)
all_structs.append(Rsp)
Rsp.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'status', 'UTF8', "", ),  # 1
    (2, TType.LIST, 'items', (TType.STRUCT, [Item, None], False), None, ),  # 2
    (3, TType.STRING, 'abtest_ids', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'request_id', 'UTF8', None, ),  # 4
)
fix_spec(all_structs)
del all_structs
