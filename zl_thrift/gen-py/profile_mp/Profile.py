#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def get_content_profiles_ex(self, req, c):
        """
        Parameters:
         - req
         - c

        """
        pass

    def get_user_profiles_ex(self, req, c):
        """
        Parameters:
         - req
         - c

        """
        pass

    def get_author_aid_profiles_ex(self, req, c):
        """
        Parameters:
         - req
         - c

        """
        pass

    def put_content_profiles(self, req, c):
        """
        Parameters:
         - req
         - c

        """
        pass

    def put_user_profiles(self, req, c):
        """
        Parameters:
         - req
         - c

        """
        pass

    def put_author_profiles(self, req, c):
        """
        Parameters:
         - req
         - c

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def get_content_profiles_ex(self, req, c):
        """
        Parameters:
         - req
         - c

        """
        self.send_get_content_profiles_ex(req, c)
        return self.recv_get_content_profiles_ex()

    def send_get_content_profiles_ex(self, req, c):
        self._oprot.writeMessageBegin('get_content_profiles_ex', TMessageType.CALL, self._seqid)
        args = get_content_profiles_ex_args()
        args.req = req
        args.c = c
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_content_profiles_ex(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_content_profiles_ex_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_content_profiles_ex failed: unknown result")

    def get_user_profiles_ex(self, req, c):
        """
        Parameters:
         - req
         - c

        """
        self.send_get_user_profiles_ex(req, c)
        return self.recv_get_user_profiles_ex()

    def send_get_user_profiles_ex(self, req, c):
        self._oprot.writeMessageBegin('get_user_profiles_ex', TMessageType.CALL, self._seqid)
        args = get_user_profiles_ex_args()
        args.req = req
        args.c = c
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_user_profiles_ex(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_user_profiles_ex_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_user_profiles_ex failed: unknown result")

    def get_author_aid_profiles_ex(self, req, c):
        """
        Parameters:
         - req
         - c

        """
        self.send_get_author_aid_profiles_ex(req, c)
        return self.recv_get_author_aid_profiles_ex()

    def send_get_author_aid_profiles_ex(self, req, c):
        self._oprot.writeMessageBegin('get_author_aid_profiles_ex', TMessageType.CALL, self._seqid)
        args = get_author_aid_profiles_ex_args()
        args.req = req
        args.c = c
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_author_aid_profiles_ex(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_author_aid_profiles_ex_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_author_aid_profiles_ex failed: unknown result")

    def put_content_profiles(self, req, c):
        """
        Parameters:
         - req
         - c

        """
        self.send_put_content_profiles(req, c)
        return self.recv_put_content_profiles()

    def send_put_content_profiles(self, req, c):
        self._oprot.writeMessageBegin('put_content_profiles', TMessageType.CALL, self._seqid)
        args = put_content_profiles_args()
        args.req = req
        args.c = c
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_put_content_profiles(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = put_content_profiles_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "put_content_profiles failed: unknown result")

    def put_user_profiles(self, req, c):
        """
        Parameters:
         - req
         - c

        """
        self.send_put_user_profiles(req, c)
        return self.recv_put_user_profiles()

    def send_put_user_profiles(self, req, c):
        self._oprot.writeMessageBegin('put_user_profiles', TMessageType.CALL, self._seqid)
        args = put_user_profiles_args()
        args.req = req
        args.c = c
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_put_user_profiles(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = put_user_profiles_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "put_user_profiles failed: unknown result")

    def put_author_profiles(self, req, c):
        """
        Parameters:
         - req
         - c

        """
        self.send_put_author_profiles(req, c)
        return self.recv_put_author_profiles()

    def send_put_author_profiles(self, req, c):
        self._oprot.writeMessageBegin('put_author_profiles', TMessageType.CALL, self._seqid)
        args = put_author_profiles_args()
        args.req = req
        args.c = c
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_put_author_profiles(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = put_author_profiles_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "put_author_profiles failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["get_content_profiles_ex"] = Processor.process_get_content_profiles_ex
        self._processMap["get_user_profiles_ex"] = Processor.process_get_user_profiles_ex
        self._processMap["get_author_aid_profiles_ex"] = Processor.process_get_author_aid_profiles_ex
        self._processMap["put_content_profiles"] = Processor.process_put_content_profiles
        self._processMap["put_user_profiles"] = Processor.process_put_user_profiles
        self._processMap["put_author_profiles"] = Processor.process_put_author_profiles
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_get_content_profiles_ex(self, seqid, iprot, oprot):
        args = get_content_profiles_ex_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_content_profiles_ex_result()
        try:
            result.success = self._handler.get_content_profiles_ex(args.req, args.c)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_content_profiles_ex", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_user_profiles_ex(self, seqid, iprot, oprot):
        args = get_user_profiles_ex_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_user_profiles_ex_result()
        try:
            result.success = self._handler.get_user_profiles_ex(args.req, args.c)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_user_profiles_ex", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_author_aid_profiles_ex(self, seqid, iprot, oprot):
        args = get_author_aid_profiles_ex_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_author_aid_profiles_ex_result()
        try:
            result.success = self._handler.get_author_aid_profiles_ex(args.req, args.c)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_author_aid_profiles_ex", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_put_content_profiles(self, seqid, iprot, oprot):
        args = put_content_profiles_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = put_content_profiles_result()
        try:
            result.success = self._handler.put_content_profiles(args.req, args.c)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("put_content_profiles", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_put_user_profiles(self, seqid, iprot, oprot):
        args = put_user_profiles_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = put_user_profiles_result()
        try:
            result.success = self._handler.put_user_profiles(args.req, args.c)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("put_user_profiles", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_put_author_profiles(self, seqid, iprot, oprot):
        args = put_author_profiles_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = put_author_profiles_result()
        try:
            result.success = self._handler.put_author_profiles(args.req, args.c)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("put_author_profiles", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class get_content_profiles_ex_args(object):
    """
    Attributes:
     - req
     - c

    """


    def __init__(self, req=None, c=None,):
        self.req = req
        self.c = c

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = ContentProfileGetReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.c = {}
                    (_ktype78, _vtype79, _size77) = iprot.readMapBegin()
                    for _i81 in range(_size77):
                        _key82 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val83 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.c[_key82] = _val83
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_content_profiles_ex_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        if self.c is not None:
            oprot.writeFieldBegin('c', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.c))
            for kiter84, viter85 in self.c.items():
                oprot.writeString(kiter84.encode('utf-8') if sys.version_info[0] == 2 else kiter84)
                oprot.writeString(viter85.encode('utf-8') if sys.version_info[0] == 2 else viter85)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_content_profiles_ex_args)
get_content_profiles_ex_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [ContentProfileGetReq, None], None, ),  # 1
    (2, TType.MAP, 'c', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)


class get_content_profiles_ex_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ContentProfileGetRsp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_content_profiles_ex_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_content_profiles_ex_result)
get_content_profiles_ex_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ContentProfileGetRsp, None], None, ),  # 0
)


class get_user_profiles_ex_args(object):
    """
    Attributes:
     - req
     - c

    """


    def __init__(self, req=None, c=None,):
        self.req = req
        self.c = c

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = UserProfileGetReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.c = {}
                    (_ktype87, _vtype88, _size86) = iprot.readMapBegin()
                    for _i90 in range(_size86):
                        _key91 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val92 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.c[_key91] = _val92
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_user_profiles_ex_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        if self.c is not None:
            oprot.writeFieldBegin('c', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.c))
            for kiter93, viter94 in self.c.items():
                oprot.writeString(kiter93.encode('utf-8') if sys.version_info[0] == 2 else kiter93)
                oprot.writeString(viter94.encode('utf-8') if sys.version_info[0] == 2 else viter94)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_user_profiles_ex_args)
get_user_profiles_ex_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [UserProfileGetReq, None], None, ),  # 1
    (2, TType.MAP, 'c', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)


class get_user_profiles_ex_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = UserProfileGetRsp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_user_profiles_ex_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_user_profiles_ex_result)
get_user_profiles_ex_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [UserProfileGetRsp, None], None, ),  # 0
)


class get_author_aid_profiles_ex_args(object):
    """
    Attributes:
     - req
     - c

    """


    def __init__(self, req=None, c=None,):
        self.req = req
        self.c = c

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = AuthorProfileAidGetReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.c = {}
                    (_ktype96, _vtype97, _size95) = iprot.readMapBegin()
                    for _i99 in range(_size95):
                        _key100 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val101 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.c[_key100] = _val101
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_author_aid_profiles_ex_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        if self.c is not None:
            oprot.writeFieldBegin('c', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.c))
            for kiter102, viter103 in self.c.items():
                oprot.writeString(kiter102.encode('utf-8') if sys.version_info[0] == 2 else kiter102)
                oprot.writeString(viter103.encode('utf-8') if sys.version_info[0] == 2 else viter103)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_author_aid_profiles_ex_args)
get_author_aid_profiles_ex_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [AuthorProfileAidGetReq, None], None, ),  # 1
    (2, TType.MAP, 'c', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)


class get_author_aid_profiles_ex_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = AuthorProfileAidGetRsp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_author_aid_profiles_ex_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_author_aid_profiles_ex_result)
get_author_aid_profiles_ex_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [AuthorProfileAidGetRsp, None], None, ),  # 0
)


class put_content_profiles_args(object):
    """
    Attributes:
     - req
     - c

    """


    def __init__(self, req=None, c=None,):
        self.req = req
        self.c = c

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = ContentProfilePutReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.c = {}
                    (_ktype105, _vtype106, _size104) = iprot.readMapBegin()
                    for _i108 in range(_size104):
                        _key109 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val110 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.c[_key109] = _val110
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('put_content_profiles_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        if self.c is not None:
            oprot.writeFieldBegin('c', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.c))
            for kiter111, viter112 in self.c.items():
                oprot.writeString(kiter111.encode('utf-8') if sys.version_info[0] == 2 else kiter111)
                oprot.writeString(viter112.encode('utf-8') if sys.version_info[0] == 2 else viter112)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(put_content_profiles_args)
put_content_profiles_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [ContentProfilePutReq, None], None, ),  # 1
    (2, TType.MAP, 'c', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)


class put_content_profiles_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ProfilePutRsp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('put_content_profiles_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(put_content_profiles_result)
put_content_profiles_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ProfilePutRsp, None], None, ),  # 0
)


class put_user_profiles_args(object):
    """
    Attributes:
     - req
     - c

    """


    def __init__(self, req=None, c=None,):
        self.req = req
        self.c = c

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = UserProfilePutReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.c = {}
                    (_ktype114, _vtype115, _size113) = iprot.readMapBegin()
                    for _i117 in range(_size113):
                        _key118 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val119 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.c[_key118] = _val119
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('put_user_profiles_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        if self.c is not None:
            oprot.writeFieldBegin('c', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.c))
            for kiter120, viter121 in self.c.items():
                oprot.writeString(kiter120.encode('utf-8') if sys.version_info[0] == 2 else kiter120)
                oprot.writeString(viter121.encode('utf-8') if sys.version_info[0] == 2 else viter121)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(put_user_profiles_args)
put_user_profiles_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [UserProfilePutReq, None], None, ),  # 1
    (2, TType.MAP, 'c', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)


class put_user_profiles_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ProfilePutRsp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('put_user_profiles_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(put_user_profiles_result)
put_user_profiles_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ProfilePutRsp, None], None, ),  # 0
)


class put_author_profiles_args(object):
    """
    Attributes:
     - req
     - c

    """


    def __init__(self, req=None, c=None,):
        self.req = req
        self.c = c

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.req = AuthorProfilePutReq()
                    self.req.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.c = {}
                    (_ktype123, _vtype124, _size122) = iprot.readMapBegin()
                    for _i126 in range(_size122):
                        _key127 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val128 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.c[_key127] = _val128
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('put_author_profiles_args')
        if self.req is not None:
            oprot.writeFieldBegin('req', TType.STRUCT, 1)
            self.req.write(oprot)
            oprot.writeFieldEnd()
        if self.c is not None:
            oprot.writeFieldBegin('c', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.c))
            for kiter129, viter130 in self.c.items():
                oprot.writeString(kiter129.encode('utf-8') if sys.version_info[0] == 2 else kiter129)
                oprot.writeString(viter130.encode('utf-8') if sys.version_info[0] == 2 else viter130)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(put_author_profiles_args)
put_author_profiles_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'req', [AuthorProfilePutReq, None], None, ),  # 1
    (2, TType.MAP, 'c', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)


class put_author_profiles_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ProfilePutRsp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('put_author_profiles_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(put_author_profiles_result)
put_author_profiles_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ProfilePutRsp, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs

