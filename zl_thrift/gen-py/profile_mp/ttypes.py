#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class KV(object):
    """
    Attributes:
     - key
     - weight

    """


    def __init__(self, key=None, weight=None,):
        self.key = key
        self.weight = weight

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.key = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('KV')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.I64, 1)
            oprot.writeI64(self.key)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.DOUBLE, 2)
            oprot.writeDouble(self.weight)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class User(object):
    """
    Attributes:
     - uid
     - u_age
     - u_gender
     - u_city
     - u_register_time
     - u_vip

    """


    def __init__(self, uid=None, u_age=None, u_gender=None, u_city=None, u_register_time=None, u_vip=None,):
        self.uid = uid
        self.u_age = u_age
        self.u_gender = u_gender
        self.u_city = u_city
        self.u_register_time = u_register_time
        self.u_vip = u_vip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.u_age = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.u_gender = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.u_city = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.u_register_time = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.u_vip = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('User')
        if self.uid is not None:
            oprot.writeFieldBegin('uid', TType.STRING, 1)
            oprot.writeString(self.uid.encode('utf-8') if sys.version_info[0] == 2 else self.uid)
            oprot.writeFieldEnd()
        if self.u_age is not None:
            oprot.writeFieldBegin('u_age', TType.I32, 2)
            oprot.writeI32(self.u_age)
            oprot.writeFieldEnd()
        if self.u_gender is not None:
            oprot.writeFieldBegin('u_gender', TType.I32, 3)
            oprot.writeI32(self.u_gender)
            oprot.writeFieldEnd()
        if self.u_city is not None:
            oprot.writeFieldBegin('u_city', TType.I32, 4)
            oprot.writeI32(self.u_city)
            oprot.writeFieldEnd()
        if self.u_register_time is not None:
            oprot.writeFieldBegin('u_register_time', TType.I32, 5)
            oprot.writeI32(self.u_register_time)
            oprot.writeFieldEnd()
        if self.u_vip is not None:
            oprot.writeFieldBegin('u_vip', TType.I32, 6)
            oprot.writeI32(self.u_vip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Content(object):
    """
    Attributes:
     - itid
     - i_duration
     - i_category
     - i_quality
     - i_p_count
     - i_title
     - i_keyword
     - i_actor
     - i_year
     - i_vip
     - i_country
     - i_author_id

    """


    def __init__(self, itid=None, i_duration=None, i_category=None, i_quality=None, i_p_count=None, i_title=None, i_keyword=None, i_actor=None, i_year=None, i_vip=None, i_country=None, i_author_id=None,):
        self.itid = itid
        self.i_duration = i_duration
        self.i_category = i_category
        self.i_quality = i_quality
        self.i_p_count = i_p_count
        self.i_title = i_title
        self.i_keyword = i_keyword
        self.i_actor = i_actor
        self.i_year = i_year
        self.i_vip = i_vip
        self.i_country = i_country
        self.i_author_id = i_author_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.itid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.i_duration = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.i_category = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.i_quality = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.i_p_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.i_title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.i_keyword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.i_actor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.i_year = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.i_vip = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.i_country = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.i_author_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Content')
        if self.itid is not None:
            oprot.writeFieldBegin('itid', TType.I64, 1)
            oprot.writeI64(self.itid)
            oprot.writeFieldEnd()
        if self.i_duration is not None:
            oprot.writeFieldBegin('i_duration', TType.I32, 2)
            oprot.writeI32(self.i_duration)
            oprot.writeFieldEnd()
        if self.i_category is not None:
            oprot.writeFieldBegin('i_category', TType.STRING, 3)
            oprot.writeString(self.i_category.encode('utf-8') if sys.version_info[0] == 2 else self.i_category)
            oprot.writeFieldEnd()
        if self.i_quality is not None:
            oprot.writeFieldBegin('i_quality', TType.DOUBLE, 4)
            oprot.writeDouble(self.i_quality)
            oprot.writeFieldEnd()
        if self.i_p_count is not None:
            oprot.writeFieldBegin('i_p_count', TType.I32, 5)
            oprot.writeI32(self.i_p_count)
            oprot.writeFieldEnd()
        if self.i_title is not None:
            oprot.writeFieldBegin('i_title', TType.STRING, 6)
            oprot.writeString(self.i_title.encode('utf-8') if sys.version_info[0] == 2 else self.i_title)
            oprot.writeFieldEnd()
        if self.i_keyword is not None:
            oprot.writeFieldBegin('i_keyword', TType.STRING, 7)
            oprot.writeString(self.i_keyword.encode('utf-8') if sys.version_info[0] == 2 else self.i_keyword)
            oprot.writeFieldEnd()
        if self.i_actor is not None:
            oprot.writeFieldBegin('i_actor', TType.STRING, 8)
            oprot.writeString(self.i_actor.encode('utf-8') if sys.version_info[0] == 2 else self.i_actor)
            oprot.writeFieldEnd()
        if self.i_year is not None:
            oprot.writeFieldBegin('i_year', TType.I32, 9)
            oprot.writeI32(self.i_year)
            oprot.writeFieldEnd()
        if self.i_vip is not None:
            oprot.writeFieldBegin('i_vip', TType.I32, 10)
            oprot.writeI32(self.i_vip)
            oprot.writeFieldEnd()
        if self.i_country is not None:
            oprot.writeFieldBegin('i_country', TType.STRING, 11)
            oprot.writeString(self.i_country.encode('utf-8') if sys.version_info[0] == 2 else self.i_country)
            oprot.writeFieldEnd()
        if self.i_author_id is not None:
            oprot.writeFieldBegin('i_author_id', TType.I64, 12)
            oprot.writeI64(self.i_author_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Author(object):
    """
    Attributes:
     - aid

    """


    def __init__(self, aid=None,):
        self.aid = aid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.aid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Author')
        if self.aid is not None:
            oprot.writeFieldBegin('aid', TType.I64, 1)
            oprot.writeI64(self.aid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CidAuthor(object):
    """
    Attributes:
     - cid
     - author

    """


    def __init__(self, cid=None, author=None,):
        self.cid = cid
        self.author = author

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.cid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.author = Author()
                    self.author.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CidAuthor')
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.I64, 1)
            oprot.writeI64(self.cid)
            oprot.writeFieldEnd()
        if self.author is not None:
            oprot.writeFieldBegin('author', TType.STRUCT, 2)
            self.author.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContentProfileGetReq(object):
    """
    Attributes:
     - cid_list

    """


    def __init__(self, cid_list=None,):
        self.cid_list = cid_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.cid_list = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI64()
                        self.cid_list.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContentProfileGetReq')
        if self.cid_list is not None:
            oprot.writeFieldBegin('cid_list', TType.LIST, 1)
            oprot.writeListBegin(TType.I64, len(self.cid_list))
            for iter6 in self.cid_list:
                oprot.writeI64(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContentProfileGetRsp(object):
    """
    Attributes:
     - content_list
     - status

    """


    def __init__(self, content_list=None, status=None,):
        self.content_list = content_list
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.content_list = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Content()
                        _elem12.read(iprot)
                        self.content_list.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContentProfileGetRsp')
        if self.content_list is not None:
            oprot.writeFieldBegin('content_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.content_list))
            for iter13 in self.content_list:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 2)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserProfileGetReq(object):
    """
    Attributes:
     - uid_list

    """


    def __init__(self, uid_list=None,):
        self.uid_list = uid_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.uid_list = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.uid_list.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserProfileGetReq')
        if self.uid_list is not None:
            oprot.writeFieldBegin('uid_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.uid_list))
            for iter20 in self.uid_list:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserProfileGetRsp(object):
    """
    Attributes:
     - user_list
     - status

    """


    def __init__(self, user_list=None, status=None,):
        self.user_list = user_list
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.user_list = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = User()
                        _elem26.read(iprot)
                        self.user_list.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserProfileGetRsp')
        if self.user_list is not None:
            oprot.writeFieldBegin('user_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.user_list))
            for iter27 in self.user_list:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 2)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthorProfileAidGetReq(object):
    """
    Attributes:
     - aid_list

    """


    def __init__(self, aid_list=None,):
        self.aid_list = aid_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.aid_list = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = iprot.readI64()
                        self.aid_list.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthorProfileAidGetReq')
        if self.aid_list is not None:
            oprot.writeFieldBegin('aid_list', TType.LIST, 1)
            oprot.writeListBegin(TType.I64, len(self.aid_list))
            for iter34 in self.aid_list:
                oprot.writeI64(iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthorProfileAidGetRsp(object):
    """
    Attributes:
     - author_list
     - status

    """


    def __init__(self, author_list=None, status=None,):
        self.author_list = author_list
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.author_list = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = Author()
                        _elem40.read(iprot)
                        self.author_list.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthorProfileAidGetRsp')
        if self.author_list is not None:
            oprot.writeFieldBegin('author_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.author_list))
            for iter41 in self.author_list:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 2)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthorProfileCidGetReq(object):
    """
    Attributes:
     - cid_list

    """


    def __init__(self, cid_list=None,):
        self.cid_list = cid_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.cid_list = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readI64()
                        self.cid_list.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthorProfileCidGetReq')
        if self.cid_list is not None:
            oprot.writeFieldBegin('cid_list', TType.LIST, 1)
            oprot.writeListBegin(TType.I64, len(self.cid_list))
            for iter48 in self.cid_list:
                oprot.writeI64(iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthorProfileCidGetRsp(object):
    """
    Attributes:
     - c_author_list
     - status

    """


    def __init__(self, c_author_list=None, status=None,):
        self.c_author_list = c_author_list
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.c_author_list = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = CidAuthor()
                        _elem54.read(iprot)
                        self.c_author_list.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthorProfileCidGetRsp')
        if self.c_author_list is not None:
            oprot.writeFieldBegin('c_author_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.c_author_list))
            for iter55 in self.c_author_list:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 2)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContentProfilePutReq(object):
    """
    Attributes:
     - content_list

    """


    def __init__(self, content_list=None,):
        self.content_list = content_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.content_list = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = Content()
                        _elem61.read(iprot)
                        self.content_list.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContentProfilePutReq')
        if self.content_list is not None:
            oprot.writeFieldBegin('content_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.content_list))
            for iter62 in self.content_list:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserProfilePutReq(object):
    """
    Attributes:
     - user_list

    """


    def __init__(self, user_list=None,):
        self.user_list = user_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.user_list = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = User()
                        _elem68.read(iprot)
                        self.user_list.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserProfilePutReq')
        if self.user_list is not None:
            oprot.writeFieldBegin('user_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.user_list))
            for iter69 in self.user_list:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthorProfilePutReq(object):
    """
    Attributes:
     - author_list

    """


    def __init__(self, author_list=None,):
        self.author_list = author_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.author_list = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = Author()
                        _elem75.read(iprot)
                        self.author_list.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthorProfilePutReq')
        if self.author_list is not None:
            oprot.writeFieldBegin('author_list', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.author_list))
            for iter76 in self.author_list:
                iter76.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProfilePutRsp(object):
    """
    Attributes:
     - status
     - count

    """


    def __init__(self, status=None, count=None,):
        self.status = status
        self.count = count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProfilePutRsp')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 1)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(KV)
KV.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'key', None, None, ),  # 1
    (2, TType.DOUBLE, 'weight', None, None, ),  # 2
)
all_structs.append(User)
User.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uid', 'UTF8', None, ),  # 1
    (2, TType.I32, 'u_age', None, None, ),  # 2
    (3, TType.I32, 'u_gender', None, None, ),  # 3
    (4, TType.I32, 'u_city', None, None, ),  # 4
    (5, TType.I32, 'u_register_time', None, None, ),  # 5
    (6, TType.I32, 'u_vip', None, None, ),  # 6
)
all_structs.append(Content)
Content.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'itid', None, None, ),  # 1
    (2, TType.I32, 'i_duration', None, None, ),  # 2
    (3, TType.STRING, 'i_category', 'UTF8', None, ),  # 3
    (4, TType.DOUBLE, 'i_quality', None, None, ),  # 4
    (5, TType.I32, 'i_p_count', None, None, ),  # 5
    (6, TType.STRING, 'i_title', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'i_keyword', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'i_actor', 'UTF8', None, ),  # 8
    (9, TType.I32, 'i_year', None, None, ),  # 9
    (10, TType.I32, 'i_vip', None, None, ),  # 10
    (11, TType.STRING, 'i_country', 'UTF8', None, ),  # 11
    (12, TType.I64, 'i_author_id', None, None, ),  # 12
)
all_structs.append(Author)
Author.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'aid', None, None, ),  # 1
)
all_structs.append(CidAuthor)
CidAuthor.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'cid', None, None, ),  # 1
    (2, TType.STRUCT, 'author', [Author, None], None, ),  # 2
)
all_structs.append(ContentProfileGetReq)
ContentProfileGetReq.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'cid_list', (TType.I64, None, False), None, ),  # 1
)
all_structs.append(ContentProfileGetRsp)
ContentProfileGetRsp.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'content_list', (TType.STRUCT, [Content, None], False), None, ),  # 1
    (2, TType.STRING, 'status', 'UTF8', None, ),  # 2
)
all_structs.append(UserProfileGetReq)
UserProfileGetReq.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'uid_list', (TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(UserProfileGetRsp)
UserProfileGetRsp.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'user_list', (TType.STRUCT, [User, None], False), None, ),  # 1
    (2, TType.STRING, 'status', 'UTF8', None, ),  # 2
)
all_structs.append(AuthorProfileAidGetReq)
AuthorProfileAidGetReq.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'aid_list', (TType.I64, None, False), None, ),  # 1
)
all_structs.append(AuthorProfileAidGetRsp)
AuthorProfileAidGetRsp.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'author_list', (TType.STRUCT, [Author, None], False), None, ),  # 1
    (2, TType.STRING, 'status', 'UTF8', None, ),  # 2
)
all_structs.append(AuthorProfileCidGetReq)
AuthorProfileCidGetReq.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'cid_list', (TType.I64, None, False), None, ),  # 1
)
all_structs.append(AuthorProfileCidGetRsp)
AuthorProfileCidGetRsp.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'c_author_list', (TType.STRUCT, [CidAuthor, None], False), None, ),  # 1
    (2, TType.STRING, 'status', 'UTF8', None, ),  # 2
)
all_structs.append(ContentProfilePutReq)
ContentProfilePutReq.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'content_list', (TType.STRUCT, [Content, None], False), None, ),  # 1
)
all_structs.append(UserProfilePutReq)
UserProfilePutReq.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'user_list', (TType.STRUCT, [User, None], False), None, ),  # 1
)
all_structs.append(AuthorProfilePutReq)
AuthorProfilePutReq.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'author_list', (TType.STRUCT, [Author, None], False), None, ),  # 1
)
all_structs.append(ProfilePutRsp)
ProfilePutRsp.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'status', 'UTF8', None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
